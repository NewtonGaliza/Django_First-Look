
Formulários

Hora de dar o toque final na nossa aplicação, vamos criar um formulário, para adcionar nossas,
postagens, o Django fornece uma ferramenta chamada ModelForm, que cria um formulário com base em
determinado modelo.

Na pasta blog, vamos criar um arquivo forms.py e escrever o seguinte:

from django import froms
from .models import Post

class PostForm(forms.ModelForm):
    
    class Meta:
        model = Post
        fields = ('title', 'text')


Estamos importando um módulo do Django e obviamente nosso modelo Post.
PostForm é o nome que nosso formulario vai receber, o ModelForm informa que ele será um
formulário.
A classe Meta, é onde dizemos ao Django, qual modelo será usado.
E por fim , dizemos qual(is) campo(s) devem estar presentes no formulário.

Vamos criar um link para o formulário, na nossa base.html, com o seguinte código:

<a href="{% url 'blog.views.post_new' %}"></a>


Estamos chamando uma view chamada post_new, ele ainda precisa ser criada, mas antes vamos 
mapear sua url:

url(r'^post/new/$', views.post_new, name='post_new'),

E agora criamos a view em si:

def post_new(request):
    Form = PostForm()
    return render(request, 'blog/post_edit.html', {'form': form})

Nós ainda vamos trabalha nessa view, mas por hora iremos criar o template para o formulário.


Template(modelos)

Precisamos criar o post_edit.html, na paosta blog/templates/blog, e precisamos seguir alguns cuidados


-Precimos de uma tag html form <form method="POST">...</form>
-Precisamos de um botão Salvar, <button type="submit">Salvar</button>
-Depois da tag form, vamos adicionar {% csrf_token %}, isso vai deixar nosso formulário seguro, se não 
for adicionado o Django vai reclamar da falta dele

Pois bem, nosso post_edit.html ficará assim:

{% extends 'blog/base.html' %}

{% block content %}
    <h1>New post</h1>
    <form method="POST" class="post-form">{% csrf_token %}
        {{ form.as_p }}
        <button type="submit" class="save btn btn-default">Guardar</button>
    </form>
{% endblock %}

Vamos testar no servidor. localhost:8000/post/new

Se tentarmos adicionar um novo post, o que acontece?

Exatamente, precisamos salvar as informações.

Quando nós enviamos o formulário, somos trazidos de volta para a mesma visão, mas desta vez 
temos mais alguns dados no request, mais especificamente em request.POST. Você se lembra que
no arquivo HTML nossa definição de <form> tem a variável method="POST"? Todos os campos vindos
do "form" estarão disponíveis agora em request.POST. 

Então na nossa view nós temos duas situações separadas para lidar. A primeira é quanto acessamos
a página pela primeira vez e queremos um formulário em branco. E a segunda, é quando nós temos
que voltar para a view com todos os dados do formulário que nós digitamos. Desse modo, precisamos 
adicionar uma condição (usaremos if para isso).

if request.method == "POST":
    [...]
else:
    form = PostForm()

Está na hora de preencher os pontos[...]. Se method é POST então nós queremos construir o PostForm
com os dados que veem do formulário, certo? Nós iremos fazer assim:

form = PostForm(request.POST)

Próximo passo é verificar se o formulário está correto, fazemos isso com form.is_valid(), assim:

if form.is_valis():
    post=form.save(commit=False)
    post.author = request.user
    psot-published_date = timezone.now()
    post.save()

Basicamente, temos duas coisas aqui: Salvamos o formulário com form.save e adicionados um autor(desde
que não haja o campo author em PostForm, e este campo é obrigatório!). commit=False significa que não 
queremos salvar o modelo Post ainda - queremos adicionar autor primeiro. Na maioria das vezes você irá
usar form.save(), sem commit=False, mas neste caso, precisamos fazer isso. post.save() irá preservar as
alterações(adicionando autor) e é criado um novo post no blog.


Quando o post for finalizado, vamos redirecionar para a página post_detail, para o post criado, vamos importar:

from django.shortcuts import redirect

Com isso já podemos fazer o redirecionamento, fazemos ele assim:

retrn redirect('post_detail', pk=post.pk)

Estamos redirecionando para post_detail, onde pk é o post mais recente.

Vamos olhar a view completa:

def post_new(request):
    if request.method == "POST":
        form = PostForm(request.POST)
        if form.is_valid():
            post = form.save(commit=False)
            post.author = request.user
            post.published_date = timezone.now()
            post.save()
            return redirect('post_detail', pk=post.pk)
    else:
        form = PostForm()
    return render(request, 'blog/post_edit.html', {'form': form})

Mais uma vez, vamos testar no servidor. Lembrem-se de estar logados com o superuser.
Um teste rápido, tente criar uma postagem com todos os dados em branco.

E se quisermos editar um post, já existente?

Vamos adicionar essa linha em post_detail.py

<a href="{% url 'post_edit' pk=post.pk%}"></a>

E mapear a seguinte url:

url(r'^post/(?P<pk>[0-9]+)/edit/$', views.post_edit, name='post_edit')

E em views.py, adicionar essa nova view:

def post_edit(request, pk):
    post = get_object_or_404(Post, pk=pk)
    if request.method == "POST":
        form = PostForm(request.POST, instance=post)
        if form.is_valid():
            post = form.save(commit=False)
            post.author = request.user
            post.published_date = timezone.now()
            post.save()
            return redirect('post_detail', pk=post.pk)
    else:
        form = PostForm(instance=post)
    return render(request, 'blog/post_edit.html', {'form': form})

Uma view muito semelhante a post_new, contudo, temos algumas diferenças, a primeira
é que estamos passando um parãmetro extra da url pk, segunda, pegamos o modelo Post
queremos editar com get_object_or_404(Post,pk=pk), e então passamos este post para 
um formulário.

E agora, testar no servidor.
